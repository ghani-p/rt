%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2019 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<input name="<% $Name %>" type="text" value="<% $Default %>" size="5" class="form-control" />
<%ARGS>
$Name => 'Priority'
$Default => ''
$QueueObj => undef
%Queues => ()
$ValueAsString => undef
</%ARGS>
<%INIT>
use List::MoreUtils 'uniq';
if ( RT->Config->Get('EnablePriorityAsString') ) {
    my %config = RT->Config->Get('PriorityAsString');

    my @names;
    if ($QueueObj) {
        push @names, $QueueObj->__Value('Name');    # Skip ACL check
    }
    elsif (%Queues) {
        for my $id ( keys %Queues ) {
            my $queue = RT::Queue->new( $session{'CurrentUser'} );
            $queue->Load($id);
            if ( $queue->Id ) {
                push @names, $queue->__Value('Name');    # Skip ACL check
            }
        }
    }
    else {
        @names = keys %config;
    }

    my $use_numeric;
    my @values;
    for my $name ( sort { lc $a cmp lc $b } uniq @names ) {
        my $value = exists $config{$name} ? $config{$name} : $config{Default};
        if ($value) {
            push @values, $value;
        }
        else {
            RT->Logger->debug("PriorityAsString for Queue $name is disabled, skipping");
            $use_numeric = 1;
            last;
        }
    }

    my @options;
    my %label_value_map;
    my %value_label_map;

    # Items in @values are hashrefs/arrayrefs, we still can de-duplicate
    # using uniq because duplicated ones are totally identical.
    for my $value ( uniq @values ) {
        my @list;
        if ( ref $value eq 'ARRAY' ) {
            @list = @$value;
        }
        elsif ( ref $value eq 'HASH' ) {
            @list = map { $_ => $value->{$_} } sort { $value->{$a} <=> $value->{$b} } keys %$value;
        }

        while ( my $label = shift @list ) {
            my $value = shift @list;
            my $option = { Label => $label, Value => $value };

            if ( defined $label_value_map{$label} ) {
                if ( $label_value_map{$label} != $value ) {
                    $use_numeric = 1;
                    last;
                }

                if ( $ValueAsString && $value_label_map{$value} ne $label ) {
                    $ValueAsString = 0;
                }
            }
            else {
                $label_value_map{$label} = $value;
                $value_label_map{$value} = $label;
                push @options, $option;
            }
        }
    }

    if ($ValueAsString) {
        for my $option (@options) {
            $option->{Value} = $option->{Label};
        }
    }

    $use_numeric = 1 unless @options;
    return $m->comp( "/Elements/SelectPriorityAsString", %ARGS, Options => \@options ) unless $use_numeric;
}

$Default = '' unless defined $Default;
</%INIT>
